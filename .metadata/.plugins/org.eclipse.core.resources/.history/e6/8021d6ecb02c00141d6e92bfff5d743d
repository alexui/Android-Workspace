package com.example.battleship;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.UUID;

import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.Dialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothServerSocket;
import android.bluetooth.BluetoothSocket;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.view.GestureDetector;
import android.view.GestureDetector.SimpleOnGestureListener;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.animation.DecelerateInterpolator;
import android.view.animation.TranslateAnimation;
import android.widget.Button;
import android.widget.TableLayout;
import android.widget.TextView;
import android.widget.ViewSwitcher;

//trebuie creata o clasa noua cu un constructor care sa obtina contextul unei activitati
class SearchingThread extends Thread{
	
	MyFieldFight act;
	
	public SearchingThread(MyFieldFight act){
		this.act=act;
	}
	
	 @Override
     public void run() {
   	  act.makeBlueToothConnection();
   	  long startTime = System.currentTimeMillis(); //fetch starting time
		  while((System.currentTimeMillis()-startTime)<act.TIMEOUT);
		  act.mBluetoothAdapter.cancelDiscovery();
		  act.runOnUiThread(new Runnable() {
			    public void run() {
			        act.closeSearchingDialog();
			    }
			});
     }
}

class ConnectingThread extends Thread{
	
	MyFieldFight act;
	
	public ConnectingThread(MyFieldFight act){
		this.act=act;
	}
	
	 @Override
     public void run() {
   	  
   	  	while(act.makeServerClientConnection()==null);
		  act.runOnUiThread(new Runnable() {
			    public void run() {
			        act.closeConnectingDialog();
			    }
			});
     }
}

class TargetThread extends Thread{
	
	MyFieldFight act;
	
	public TargetThread(MyFieldFight act){
		this.act=act;
	}
	
	public void run(){
		act.processTargetMessage();
	}
}

class OnSwipeTouchListener implements OnTouchListener {

    private final GestureDetector gestureDetector;

    public OnSwipeTouchListener(Context context) {
        gestureDetector = new GestureDetector(context, new GestureListener());
    }

    public void onSwipeLeft() {
    }

    public void onSwipeRight() {
    }

    public boolean onTouch(View v, MotionEvent event) {
        return gestureDetector.onTouchEvent(event);
    }

    private final class GestureListener extends SimpleOnGestureListener {

        private static final int SWIPE_DISTANCE_THRESHOLD = 1;
        private static final int SWIPE_VELOCITY_THRESHOLD = 1;

        @Override
        public boolean onDown(MotionEvent e) {
            return true;
        }

        @Override
        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
            float distanceX = e2.getX() - e1.getX();
            float distanceY = e2.getY() - e1.getY();
            if (Math.abs(distanceX) > Math.abs(distanceY) && Math.abs(distanceX) > SWIPE_DISTANCE_THRESHOLD && Math.abs(velocityX) > SWIPE_VELOCITY_THRESHOLD) {
                if (distanceX > 0)
                    onSwipeRight();
                else
                    onSwipeLeft();
                return true;
            }
            return false;
        }
    }
}

public class MyFieldFight extends Activity {

	Animation slide_in_left, slide_out_right;
	ViewSwitcher vs;
	TableLayout tl1,tl2;
	String player1,player2;
	TextView p1,p2,result1,result2;
	BluetoothServerSocket mmServerSocket;
	BluetoothSocket socket;
	BluetoothAdapter mBluetoothAdapter;
	BroadcastReceiver mReceiver;
	Integer TIME_LIMIT1=5000;
	Integer TIME_LIMIT2=10000;
	Integer TIMEOUT =10000;
	HashMap<Button,Integer> myField,opField;
	ArrayList<BDevice> mArrayAdapter;
	ArrayList<BluetoothDevice> mDevices;
	Dialog pop;
	final int REQ=2;
	final int HIT=-1;
	
	int Lose=16;
	
	final String NAME_PREFIX="NAME ";
	final String TARGET_PREFIX="POS ";
	final String RESULT_PREFIX="RES ";
	final String LOSER_PREFIX="LOS ";
	
	final int NAME =1,TARGET=2,RESULT=3,LOSER=4;
	
	Integer field[][];
	BluetoothDevice btd;
	ConnectedThread ct;
	int position;
	
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.my_field_activity);
		
		vs = (ViewSwitcher) findViewById(R.id.viewSwitcher);
		tl1 = (TableLayout) findViewById(R.id.TABLE1);
		tl2 = (TableLayout) findViewById(R.id.TABLE2);
		
		p1 = (TextView) findViewById(R.id.PLAYER1);
		p2 = (TextView) findViewById(R.id.PLAYER2);
		result1=(TextView) findViewById(R.id.RESULT1);
		result2=(TextView) findViewById(R.id.RESULT2);
		
		field = new Integer[BattleFieldDrawActivity.SQUARE_NO+1][BattleFieldDrawActivity.SQUARE_NO+1];
		initializeField(field, BattleFieldDrawActivity.SQUARE_NO_VERTICAL, BattleFieldDrawActivity.SQUARE_NO_HORIZONTAL);
		myField = new HashMap<Button, Integer>();
		opField = new HashMap<Button, Integer>();
		
		slide_in_left = AnimationUtils.loadAnimation(this,R.anim.slide_to_left);
		slide_out_right = AnimationUtils.loadAnimation(this,R.anim.slide_to_right);
		  
		View v = findViewById(R.id.main);
		  
		v.setOnTouchListener(new OnSwipeTouchListener(this.getApplicationContext()){
			  @Override
			    public void onSwipeLeft() {
			        vs.setOutAnimation(outToLeftAnimation());
			        vs.setInAnimation(inFromRightAnimation());
			        vs.showPrevious();
			    }
			  
			  @Override
			    public void onSwipeRight() {
				  	vs.setOutAnimation(outToRightAnimation());
			        vs.setInAnimation(inFromLeftAnimation());
			        vs.showNext();
			    }
		  });
		  	  
		player1 = getIntent().getStringExtra("name");
  		p1.setText(player1);
  		
  		for(int j=1;j<=BattleFieldDrawActivity.SQUARE_NO_VERTICAL;j++){
			for(int k=1;k<=BattleFieldDrawActivity.SQUARE_NO_HORIZONTAL;k++){
				int s; 
				s= getIntent().getExtras().getInt("cheie"+j+k);
				int nr;
				if (j==1)
					nr=k;
				else nr=8*(j-1)+k;
				
				int id = getResources().getIdentifier("button"+nr, "id", getPackageName());
				int idp = getResources().getIdentifier("button"+nr+"p", "id", getPackageName());
				Button b = (Button)findViewById(id);
				Button bp = (Button)findViewById(idp);
				if(s==1)
					b.setBackgroundColor(Color.parseColor("#AC8BF4"));
				if(s==2)
					b.setBackgroundColor(Color.parseColor("#67ADF0"));
				
				field[j][k]=s;
				
				myField.put(b, nr);
				opField.put(bp,nr);
			}
		}  
  		
		  //Searching
		  pop = new Searching(MyFieldFight.this);
		  pop.setCanceledOnTouchOutside(false);
          pop.show();
		  
		  Thread t = new SearchingThread(this);
		  t.start();	  
	}
	
	public void initializeField(Integer matrix[][],int rows,int cols){
		for (int i=0;i<=rows;i++)
			for(int j=0;j<=cols;j++){
				matrix[i][j]=0;
			}
	}
	
	public void closeSearchingDialog(){
		pop.dismiss();
		Intent i = new Intent(MyFieldFight.this,Devices.class);
				
		i.putExtra("nr", mArrayAdapter.size());
		for(int k=0;k<mArrayAdapter.size();k++){
			i.putExtra("name"+k, mArrayAdapter.get(k).name);
			i.putExtra("address"+k, mArrayAdapter.get(k).address);
		}
		
		startActivityForResult(i, REQ);
	}
	
	public void closeConnectingDialog(){
		pop.dismiss();
	}
	
	public void onActivityResult(int requestCode,int resultCode,Intent data){
		if(requestCode==REQ){
			if(resultCode==Activity.RESULT_OK){
				
				if(data.getBooleanExtra("REDO", false))
				{
					//afiseaza dialog de asteptare
					pop = new Searching(MyFieldFight.this);
					pop.setCanceledOnTouchOutside(false);
			        pop.show();
					
			        //cauta dispozitive bluetooth
					Thread t = new SearchingThread(MyFieldFight.this);
					t.start();
				}
				else{
				
					position = data.getIntExtra("pos", 0);
					String addr = mArrayAdapter.get(position).address;
					System.out.println("address:"+addr);
					addr = addr+"\n"+mArrayAdapter.get(position).name;
					
					pop= new Connecting(MyFieldFight.this);
					pop.setCanceledOnTouchOutside(false);
					pop.show();
					
					Thread t = new ConnectingThread(MyFieldFight.this);
					t.start();
				}
			}
		}
	}
		
	static public byte[] object2Bytes( Object o ) throws IOException {
	      ByteArrayOutputStream baos = new ByteArrayOutputStream();
	      ObjectOutputStream oos = new ObjectOutputStream( baos );
	      oos.writeObject( o );
	      return baos.toByteArray();
	    }
		
	public void makeConnection(){
				
		Thread thread = new Thread()
		  {
		      @Override
		      public void run() {
			    	HttpClient httpclient = new DefaultHttpClient();
			        HttpResponse response;
			        String responseString=null;
					try {
						response = httpclient.execute(new HttpGet("http://www.google.com"));
						StatusLine statusLine = response.getStatusLine();
					        if(statusLine.getStatusCode() == HttpStatus.SC_OK){
					            ByteArrayOutputStream out = new ByteArrayOutputStream();
					            response.getEntity().writeTo(out);
					            out.close();
					             responseString= out.toString();
					            //..more logic
					        } else{
					            //Closes the connection.
					            response.getEntity().getContent().close();
					            throw new IOException(statusLine.getReasonPhrase());
					        }
					} catch (ClientProtocolException e) {
						e.printStackTrace();
					} catch (IOException e) {
						e.printStackTrace();
					}
					
					System.out.println("string: "+responseString);
		      }
		  };

		 thread.start();
	}

	@SuppressLint("ShowToast")
	public void makeBlueToothConnection(){
		
		mArrayAdapter= new ArrayList<BDevice>();
		mDevices = new ArrayList<BluetoothDevice>();
		mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
		
		//Get the BluetoothAdapter
		if (mBluetoothAdapter == null) {
			return ;
		}
		
		//Enable Bluetooth
		if (!mBluetoothAdapter.isEnabled()) {
		    Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
			startActivity(enableBtIntent);
		}
			
		//Discovering devices
		//Querying paired devices
		Set<BluetoothDevice> pairedDevices = mBluetoothAdapter.getBondedDevices();
		// If there are paired devices
		if (pairedDevices.size() > 0) {
		    // Loop through paired devices
		    for (BluetoothDevice device : pairedDevices) {
		        // Add the name and address to an array adapter to show in a ListView
		    	BDevice new_d = new BDevice(device.getName(),device.getAddress());
		    	if(!mArrayAdapter.contains(new_d)){
		    		mArrayAdapter.add(new_d);
		    		mDevices.add(device);
		    	}
		    }
		}
				
		//Enabling discoverability
		Intent discoverableIntent = new
				Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);
		discoverableIntent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, 300);
		startActivity(discoverableIntent);
				
		if(mBluetoothAdapter.isDiscovering()){
			mBluetoothAdapter.cancelDiscovery();
		}
		else{
			Boolean discovery= mBluetoothAdapter.startDiscovery();
			if(!discovery){
				finish();
			}		
		}
			
		
		// Create a BroadcastReceiver for ACTION_FOUND
		 mReceiver= new BroadcastReceiver() {
		    public void onReceive(Context context, Intent intent) {
		        String action = intent.getAction();
		        // When discovery finds a device
		        if (BluetoothDevice.ACTION_FOUND.equals(action)) {
		            // Get the BluetoothDevice object from the Intent
		            BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
		            // Add the name and address to an array adapter to show in a ListView
		            BDevice new_d = new BDevice(device.getName(),device.getAddress());
			    	if(!mArrayAdapter.contains(new_d)){
			    		mArrayAdapter.add(new_d);
			    		mDevices.add(device);
			    	}
			        System.out.println(""+device.getName()+"  "+device.getAddress());

		        }
		    }
		};
		// Register the BroadcastReceiver
		IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_FOUND);
		registerReceiver(mReceiver, filter); // Don't forget to unregister during onDestroy
		
		
	}

	public BluetoothSocket makeServerClientConnection(){
		
		socket=null;
		
		AcceptThread server = new AcceptThread(MyFieldFight.this);
		server.start();
		
		if(socket==null){
			btd = mDevices.get(position);
			System.out.println("Connecting to "+btd.getName());
			ConnectThread client = new ConnectThread(btd,MyFieldFight.this);
			client.start();
		}
		
		return socket;
	}
	
	public void manageConnectedSocket(BluetoothSocket socket) {
		  
        ct = new ConnectedThread(socket);
        
        for(Button bp : opField.keySet())
        {				
			bp.setOnClickListener(new OnClickListener() {
					
					@Override
					public void onClick(View v) {
						Button b = (Button)v;
						
						int i = opField.get(b);
												
						String text = TARGET_PREFIX+i;
						System.out.println(text);
						byte[] bytes = text.getBytes();
						ct.write(bytes);
					}
			});
		}     
        
        System.out.println("Time for reading");
    	ct.read();	
    	System.out.println("reading...");
    	
    	String hello;
    	hello = NAME_PREFIX+player1;
    	ct.write(hello.getBytes());
	}
	
	@SuppressLint("NewApi")
	private class AcceptThread extends Thread {
	   	 
		private MyFieldFight act;
		private Random random = new Random();
		
	    public AcceptThread(MyFieldFight act) {
	        // Use a temporary object that is later assigned to mmServerSocket,
	        // because mmServerSocket is final
	    	this.act =act;
	        BluetoothServerSocket tmp = null;
	        try {
	            // MY_UUID is the app's UUID string, also used by the client code
	            tmp = mBluetoothAdapter.listenUsingRfcommWithServiceRecord(this.getName(), new UUID(NORM_PRIORITY, NORM_PRIORITY));
	        } catch (IOException e) { }
	        mmServerSocket = tmp;
	        System.out.println("accept thread");
	    }
	 
	    public void run() {
	        // Keep listening until exception occurs or a socket is returned
	        while (true) {
	            try {
	            	System.out.println("listening");
	            	
	            	int time = random.nextInt(TIME_LIMIT2)+TIME_LIMIT1;
	                socket = mmServerSocket.accept(time);
	            } catch (IOException e) {
	            	System.out.println("socket down");
	                break;
	            }
	            // If a connection was accepted
	            if (socket != null) {
	                // Do work to manage the connection (in a separate thread)
	                System.out.println("received");
	                //mutare cancel	                
	                cancel();
					System.out.println("Socket closed.");
	                break;
	            }
	        }
	        //aici
	        act.runOnUiThread(new Runnable() {
				
				@Override
				public void run() {
					System.out.println("Managing connection");
					System.out.println("Conectat: "+(socket!=null)+" "+socket.isConnected());
					manageConnectedSocket(socket);
				}
			});
	    }
	 
		/** Will cancel the listening socket, and cause the thread to finish */
	    public void cancel() {
	        try {
	            mmServerSocket.close();
	        } catch (IOException e) { }
	    }
	}
	
	@SuppressLint("NewApi")
	private class ConnectThread extends Thread {
	    private final BluetoothDevice mmDevice;
	    private MyFieldFight act;
	    
	    public ConnectThread(BluetoothDevice device,MyFieldFight act) {
	        // Use a temporary object that is later assigned to mmSocket,
	        // because mmSocket is final
	        BluetoothSocket tmp = null;
	        mmDevice = device;
	        this.act = act;
	 
	        // Get a BluetoothSocket to connect with the given BluetoothDevice
	        try {
	            // MY_UUID is the app's UUID string, also used by the server code
	            tmp = mmDevice.createRfcommSocketToServiceRecord(new UUID(NORM_PRIORITY, NORM_PRIORITY));
	        } catch (IOException e) { }
	        socket = tmp;
	        	    	
	        System.out.println("connect to thread");
	    }
	 
	    public void run() {
	        // Cancel discovery because it will slow down the connection
	        mBluetoothAdapter.cancelDiscovery();
	 
	        try {
	            // Connect the device through the socket. This will block
	            // until it succeeds or throws an exception
	            socket.connect();
	            System.out.println("socket connected");
	        } catch (IOException connectException) {
	            // Unable to connect; close the socket and get out
	            try {
	                socket.close();
	            } catch (IOException closeException) {
	            	closeException.printStackTrace();
	            }
	            return;
	        }
	 
            System.out.println("connected");
            act.runOnUiThread(new Runnable() {
				
				@Override
				public void run() {
					System.out.println("Managing connection");
					System.out.println("Conectat: "+(socket!=null)+" "+socket.isConnected());
					manageConnectedSocket(socket);
				}
			});
	        // Do work to manage the connection (in a separate thread)
	    }
	    	 	    
	}
	
	private class ConnectedThread{
	    private final BluetoothSocket mmSocket;
	    private InputStream mmInStream;
	    private OutputStream mmOutStream;
	    int msg_type=0;
	 
	    public ConnectedThread(BluetoothSocket socket) {
	        mmSocket = socket;
	        InputStream tmpIn = null;
	        OutputStream tmpOut = null; 
	 
	        // Get the input and output streams, using temp objects because
	        // member streams are final
	        try {
	            tmpIn = socket.getInputStream();
	            tmpOut = socket.getOutputStream();
	        } catch (IOException e) { }
	 
	        mmInStream = tmpIn;
	        mmOutStream = tmpOut;
	    }
	 
	    public void read() {

	    	Handler handler=new Handler();
	    	BluetoothSocketListener bsl = new BluetoothSocketListener(mmSocket,handler);
	    	Thread messageListener = new Thread(bsl);
	    	System.out.println("Create listener thread.");
	    	messageListener.start();
		}

		private class BluetoothSocketListener implements Runnable{
	    	private BluetoothSocket socket;
	    	private Handler handler;
	    	public BluetoothSocketListener(BluetoothSocket socket,Handler handler) {
		    	this.socket = socket;
		    	this.handler = handler;
	    	}

	    	@Override
	    	public void run() {
		    	int bufferSize = 1024;
		    	byte[] buffer = new byte[bufferSize];
		    	try {
			    	int bytesRead = -1;
			    	String message = "";
			    	while (true) {
				    	message = "";
				    	bytesRead = mmInStream.read(buffer);
				    	if (bytesRead != -1) {
					    	while ((bytesRead==bufferSize)&&(buffer[bufferSize-1] != 0)) {
						    	message = message + new String(buffer, 0, bytesRead);
						    	bytesRead = mmInStream.read(buffer);
				    		}
					    	message = message + new String(buffer, 0, bytesRead);
					    	handler.post(new MessageProcess(message));
					    	socket.getInputStream();
					    	System.out.println("msg received: "+message);
				    	}
			    	}
			    	
		    	} catch (IOException e) {
		    		e.printStackTrace();
		    	}
	    	}//end run
    	}//end class

		private class MessageProcess implements Runnable{

			String msg;;
			
			public MessageProcess(String text){
				this.msg=text;
			}
			
			public String getMessageType(String data){
		    	
		    	StringTokenizer st = new StringTokenizer(data, " ");
		    	String type = st.nextToken();
		    	type.trim();
		    	System.out.println("type: "+type);
		    	String message=(st.nextToken());
		    	
		    	if(type.compareTo(NAME_PREFIX.trim())==0)
		    		msg_type=NAME;
		    	else if(type.compareTo(TARGET_PREFIX.trim())==0)
		    		msg_type=TARGET;
		    	if(type.compareTo(RESULT_PREFIX.trim())==0)
		    		msg_type= RESULT;
		    	if(type.compareTo(LOSER_PREFIX.trim())==0)
		    		msg_type=LOSER;
		    	
		    	return message;
		    }
			
			@Override
			public void run() {
				String message = getMessageType(msg);
				System.out.println("message: "+message+" type: "+msg_type);
                
                switch(msg_type){
                case NAME: 
                	System.out.println("msg:"+message);
                	p2.setText(message); 
                	break;
                	
                case TARGET:
                	
                	
                	
                	int i = Integer.parseInt(message); 
                	int x,y;
                	x =(i-1)/BattleFieldDrawActivity.SQUARE_NO_HORIZONTAL+1;
					y=(i-1)%BattleFieldDrawActivity.SQUARE_NO_VERTICAL+1;
					
					if(field[x][y]==1 || field[x][y]==2){
						field[x][y]=HIT;
						Lose--;
						int id = getResources().getIdentifier("button"+i, "id", getPackageName());
						Button b = (Button)findViewById(id);
						b.setBackgroundColor(Color.RED);	
						
						result1.setText("HIT");
						result1.setTextColor(Color.GREEN);
						
					}
					else{
						if(field[x][y]==0){
							int id = getResources().getIdentifier("button"+i, "id", getPackageName());
							Button b = (Button)findViewById(id);
							b.setBackgroundColor(Color.GREEN);
							
							result1.setText("MISSED");
							result1.setTextColor(Color.RED);
							}
					}
					

					//send result
					String text;
					text=RESULT_PREFIX+i;
					byte[] bts=text.getBytes();
					write(bts);
					
                	break;
                	
                	case RESULT:
                	System.out.println("case result");
                	/*int j = Integer.parseInt(message.trim()); 
                	System.out.println("result j:"+j+".");
                	
					if(j!=0){
						int id = getResources().getIdentifier("button"+j+"p", "id", getPackageName());
						Button b = (Button)findViewById(id);
						b.setBackgroundColor(Color.GREEN);			
						result2.setText("HIT");
						result2.setTextColor(Color.GREEN);
						if(checkLooser())
						{
							String text;
							text=LOSER_PREFIX;
							byte[] bts=text.getBytes();
							write(bts);
							
							pop = new Exiting(MyFieldFight.this, Exiting.ExitType.LOOSER);
			          		pop.setCanceledOnTouchOutside(false);
			                pop.show();
						}
					}
					else{
						int id = getResources().getIdentifier("button"+j+"p", "id", getPackageName());
						Button b = (Button)findViewById(id);
						b.setBackgroundColor(Color.RED);
						result2.setText("MISSED");
						result2.setTextColor(Color.RED);
					}*/
	                case LOSER:
	                pop = new Exiting(MyFieldFight.this, Exiting.ExitType.WINNER);
	          		pop.setCanceledOnTouchOutside(false);
	                pop.show();
	                	
	                default:System.out.println("Wrong text received."); break;
	                }
			}
		}
					
		public void processTargetMessage(){
			
		}
		
	    /* Call this from the main activity to send data to the remote device */
	    public void write(byte[] bytes) {
	        try {
	        	System.out.println("writing "+new String(bytes));
	        	mmOutStream = socket.getOutputStream();
	            mmOutStream.write(bytes);
	        } catch (IOException e) { }
	    }
	 
	}

	public Boolean checkLooser(){
		return Lose==0;
	}
	
	@Override
	public void onBackPressed() {
		return;
	}
	
	private Animation outToLeftAnimation() {
	    Animation outtoLeft = new TranslateAnimation(
	        Animation.RELATIVE_TO_PARENT, 0.0f,
	        Animation.RELATIVE_TO_PARENT, -1.0f,
	        Animation.RELATIVE_TO_PARENT, 0.0f,
	        Animation.RELATIVE_TO_PARENT, 0.0f);
	    outtoLeft.setDuration(200);
	    outtoLeft.setInterpolator(new DecelerateInterpolator());
	    return outtoLeft;
	    }

	private Animation outToRightAnimation() {
	    Animation outtoRight = new TranslateAnimation(
	        Animation.RELATIVE_TO_PARENT, 0.0f,
	        Animation.RELATIVE_TO_PARENT, +1.0f,
	        Animation.RELATIVE_TO_PARENT, 0.0f,
	        Animation.RELATIVE_TO_PARENT, 0.0f);
	    outtoRight.setDuration(200);
	    outtoRight.setInterpolator(new DecelerateInterpolator());
	    return outtoRight;
	    }
	
	private Animation inFromRightAnimation() {

        Animation inFromRight = new TranslateAnimation(
                Animation.RELATIVE_TO_PARENT, +1.0f,
                Animation.RELATIVE_TO_PARENT, 0.0f,
                Animation.RELATIVE_TO_PARENT, 0.0f,
                Animation.RELATIVE_TO_PARENT, 0.0f);
        inFromRight.setDuration(200);
        inFromRight.setInterpolator(new DecelerateInterpolator());
        return inFromRight;
        }
	
	private Animation inFromLeftAnimation() {
	    Animation inFromLeft = new TranslateAnimation(
	        Animation.RELATIVE_TO_PARENT, -1.0f,
	        Animation.RELATIVE_TO_PARENT, 0.0f,
	        Animation.RELATIVE_TO_PARENT, 0.0f,
	        Animation.RELATIVE_TO_PARENT, 0.0f);
	    inFromLeft.setDuration(200);
	    inFromLeft.setInterpolator(new DecelerateInterpolator());
	    return inFromLeft;
	    }
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// TODO Auto-generated method stub
		getMenuInflater().inflate(R.menu.battle_field_draw, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();

		switch(id){
		case R.id.EXIT: finish();
		}
		return super.onOptionsItemSelected(item);
	}

	public void closeActivity(){
		
		try {
            socket.close();
        } catch (IOException e) {
        	e.printStackTrace();
        }
		
		finish();
	}

	@Override
	protected void onDestroy() {
		unregisterReceiver(mReceiver);
		super.onDestroy();
	}
	
	
}
